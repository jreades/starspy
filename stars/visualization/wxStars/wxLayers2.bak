"""
wxLayers

wxLayers implement drawing of stars layers in wx
"""
import wx
import numpy
import stars.visualization.layers as layers
from stars.visualization.transforms import WorldToViewTransform
from kernelDensityTime import KernelDensity
from pysal.cg import bbcommon, get_rectangle_rectangle_intersection

class wxPolygonLayer:
    def __init__(self,layer):
        if not isinstance(layer,layers.PolygonLayer):
            raise TypeError, "Layer must be instance of PolygonLayer"
        self.layer = layer
        self.trns = 0
        self._paths = {}
        self._create_Paths()
        self._brushes = {}
        self._pens = {}
    def _create_Paths(self):
        #buff = wx.EmptyBitmapRGBA(1,1,alpha=0)
        #dc = wx.MemoryDC()
        #dc.SelectObject(buff)
        #gc = wx.GraphicsContext.Create(dc)
        gr = wx.GraphicsRenderer_GetDefaultRenderer()
        pths = self._paths
        pths['all'] = all = gr.CreatePath()
        for i,poly in enumerate(self.layer.data):
            pths[i] = pth = gr.CreatePath()
            parts = poly.parts
            if poly.holes[0]:
                parts = parts + poly.holes
            for part in parts:
                x,y = part[0]
                pth.MoveToPoint(x,y)
                for x,y in part[1:]:
                    pth.AddLineToPoint(x,y)
                pth.CloseSubpath()
            all.AddPath(pth)
    def draw_set(self,pth,ids):
        window = self.transform.extent
        data = self._paths
        #inside = set([x.id-1 for x in self.layer.locator.overlapping(window)])
        #to_draw = inside.intersection(set(ids))
        for i in ids:
            poly = data[i]
            pth.AddPath(poly)
            # only draw the polygon if it's inside the view window.
            # for very large shapefiles and small view windows, it would be fast to query an rtree.
            #if bbcommon(window,poly.bounding_box):
        return pth
    def draw(self,transform,dc=None):
        self.transform = transform
        w,h = transform.pixel_size
        if dc == None:
            buff = wx.EmptyBitmapRGBA(w,h,alpha=self.trns)
            dc = wx.MemoryDC()
            dc.SelectObject(buff)
        gc = wx.GraphicsContext.Create(dc)
        if 'default' not in self._pens:
            self._pens['default'] = gc.CreatePen(wx.Pen(wx.Colour(0,0,0,255),1))
        gc.SetPen(self._pens['default'])
        matrix = gc.CreateMatrix()
        matrix.Scale(1./transform.scale,1./-transform.scale) #first transform is applied last
        matrix.Translate(*transform.offset)                   #last transform is applied first
        matrix2 = gc.CreateMatrix(*matrix.Get())
        matrix2.Invert()
        if self.layer.classification and self.layer.colors:
            cl = self.layer.classification
            cs = self.layer.colors
        else:
            class EmptyCL:
                classes = [range(len(self.layer.data))]
            cl = EmptyCL()
            #cs = {0:(255,0,0)}
            cs = self.layer.colors
        for i,cls in enumerate(cl.classes):
            r,g,b,a = cs[i]
            if cs[i] not in self._brushes:
                self._brushes[cs[i]] = gc.CreateBrush(wx.Brush(wx.Colour(r,g,b,a)))
            #pth = gc.CreatePath()
            #pth = self.draw_set(pth,cls)
            pth = self._paths['all']
            pth.Transform(matrix)
            gc.SetBrush( self._brushes[cs[i]] )
            gc.DrawPath(pth)
            pth.Transform(matrix2)
            #gc.FillPath(pth)
            #gc.StrokePath(pth)
        #return buff
    def draw_selection(self,transform):
        self.transform = transform
        w,h = transform.pixel_size
        buff = wx.EmptyBitmapRGBA(w,h,alpha=self.trns)
        dc = wx.MemoryDC()
        dc.SelectObject(buff)
        gc = wx.GraphicsContext.Create(dc)
        gc.SetPen( gc.CreatePen(wx.Pen(wx.Colour(0,0,0,255),1)) )
        gc.SetBrush( gc.CreateBrush(wx.Brush(wx.Colour(255,255,0,255), style=wx.CROSSDIAG_HATCH)) )
        matrix = gc.CreateMatrix()
        matrix.Scale(1./transform.scale,1./-transform.scale) #first transform is applied last
        matrix.Translate(*transform.offset)                   #last transform is applied first
        pth = gc.CreatePath()
        pth = self.draw_set(pth,self.layer.selection)
        pth.Transform(matrix)
        gc.FillPath(pth)
        gc.StrokePath(pth)
        return buff

